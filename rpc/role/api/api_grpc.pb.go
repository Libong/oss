// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.1
// source: proto/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RoleService_AddRole_FullMethodName         = "/com.liBong.rbac.service.role.api.RoleService/addRole"
	RoleService_DeleteRole_FullMethodName      = "/com.liBong.rbac.service.role.api.RoleService/deleteRole"
	RoleService_UpdateRole_FullMethodName      = "/com.liBong.rbac.service.role.api.RoleService/updateRole"
	RoleService_SearchRolesPage_FullMethodName = "/com.liBong.rbac.service.role.api.RoleService/searchRolesPage"
	RoleService_CountRole_FullMethodName       = "/com.liBong.rbac.service.role.api.RoleService/countRole"
	RoleService_RoleById_FullMethodName        = "/com.liBong.rbac.service.role.api.RoleService/roleById"
	RoleService_RolesByIds_FullMethodName      = "/com.liBong.rbac.service.role.api.RoleService/rolesByIds"
	RoleService_RoleByName_FullMethodName      = "/com.liBong.rbac.service.role.api.RoleService/roleByName"
	RoleService_BatchAddRole_FullMethodName    = "/com.liBong.rbac.service.role.api.RoleService/batchAddRole"
)

// RoleServiceClient is the client API for RoleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleServiceClient interface {
	AddRole(ctx context.Context, in *AddRoleReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteRole(ctx context.Context, in *DeleteRoleReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SearchRolesPage(ctx context.Context, in *SearchRolesPageReq, opts ...grpc.CallOption) (*SearchRolesPageResp, error)
	CountRole(ctx context.Context, in *CountRolesReq, opts ...grpc.CallOption) (*CountRolesResp, error)
	RoleById(ctx context.Context, in *RoleByIdReq, opts ...grpc.CallOption) (*RoleByIdResp, error)
	RolesByIds(ctx context.Context, in *RolesByIdsReq, opts ...grpc.CallOption) (*RolesByIdsResp, error)
	RoleByName(ctx context.Context, in *RoleByNameReq, opts ...grpc.CallOption) (*RoleByNameResp, error)
	BatchAddRole(ctx context.Context, in *BatchAddRoleReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type roleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleServiceClient(cc grpc.ClientConnInterface) RoleServiceClient {
	return &roleServiceClient{cc}
}

func (c *roleServiceClient) AddRole(ctx context.Context, in *AddRoleReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RoleService_AddRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) DeleteRole(ctx context.Context, in *DeleteRoleReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RoleService_DeleteRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RoleService_UpdateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) SearchRolesPage(ctx context.Context, in *SearchRolesPageReq, opts ...grpc.CallOption) (*SearchRolesPageResp, error) {
	out := new(SearchRolesPageResp)
	err := c.cc.Invoke(ctx, RoleService_SearchRolesPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) CountRole(ctx context.Context, in *CountRolesReq, opts ...grpc.CallOption) (*CountRolesResp, error) {
	out := new(CountRolesResp)
	err := c.cc.Invoke(ctx, RoleService_CountRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) RoleById(ctx context.Context, in *RoleByIdReq, opts ...grpc.CallOption) (*RoleByIdResp, error) {
	out := new(RoleByIdResp)
	err := c.cc.Invoke(ctx, RoleService_RoleById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) RolesByIds(ctx context.Context, in *RolesByIdsReq, opts ...grpc.CallOption) (*RolesByIdsResp, error) {
	out := new(RolesByIdsResp)
	err := c.cc.Invoke(ctx, RoleService_RolesByIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) RoleByName(ctx context.Context, in *RoleByNameReq, opts ...grpc.CallOption) (*RoleByNameResp, error) {
	out := new(RoleByNameResp)
	err := c.cc.Invoke(ctx, RoleService_RoleByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) BatchAddRole(ctx context.Context, in *BatchAddRoleReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RoleService_BatchAddRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleServiceServer is the server API for RoleService service.
// All implementations must embed UnimplementedRoleServiceServer
// for forward compatibility
type RoleServiceServer interface {
	AddRole(context.Context, *AddRoleReq) (*emptypb.Empty, error)
	DeleteRole(context.Context, *DeleteRoleReq) (*emptypb.Empty, error)
	UpdateRole(context.Context, *UpdateRoleReq) (*emptypb.Empty, error)
	SearchRolesPage(context.Context, *SearchRolesPageReq) (*SearchRolesPageResp, error)
	CountRole(context.Context, *CountRolesReq) (*CountRolesResp, error)
	RoleById(context.Context, *RoleByIdReq) (*RoleByIdResp, error)
	RolesByIds(context.Context, *RolesByIdsReq) (*RolesByIdsResp, error)
	RoleByName(context.Context, *RoleByNameReq) (*RoleByNameResp, error)
	BatchAddRole(context.Context, *BatchAddRoleReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedRoleServiceServer()
}

// UnimplementedRoleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRoleServiceServer struct {
}

func (UnimplementedRoleServiceServer) AddRole(context.Context, *AddRoleReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRole not implemented")
}
func (UnimplementedRoleServiceServer) DeleteRole(context.Context, *DeleteRoleReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedRoleServiceServer) UpdateRole(context.Context, *UpdateRoleReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedRoleServiceServer) SearchRolesPage(context.Context, *SearchRolesPageReq) (*SearchRolesPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRolesPage not implemented")
}
func (UnimplementedRoleServiceServer) CountRole(context.Context, *CountRolesReq) (*CountRolesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountRole not implemented")
}
func (UnimplementedRoleServiceServer) RoleById(context.Context, *RoleByIdReq) (*RoleByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleById not implemented")
}
func (UnimplementedRoleServiceServer) RolesByIds(context.Context, *RolesByIdsReq) (*RolesByIdsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RolesByIds not implemented")
}
func (UnimplementedRoleServiceServer) RoleByName(context.Context, *RoleByNameReq) (*RoleByNameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleByName not implemented")
}
func (UnimplementedRoleServiceServer) BatchAddRole(context.Context, *BatchAddRoleReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchAddRole not implemented")
}
func (UnimplementedRoleServiceServer) mustEmbedUnimplementedRoleServiceServer() {}

// UnsafeRoleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleServiceServer will
// result in compilation errors.
type UnsafeRoleServiceServer interface {
	mustEmbedUnimplementedRoleServiceServer()
}

func RegisterRoleServiceServer(s grpc.ServiceRegistrar, srv RoleServiceServer) {
	s.RegisterService(&RoleService_ServiceDesc, srv)
}

func _RoleService_AddRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).AddRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_AddRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).AddRole(ctx, req.(*AddRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).DeleteRole(ctx, req.(*DeleteRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).UpdateRole(ctx, req.(*UpdateRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_SearchRolesPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRolesPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).SearchRolesPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_SearchRolesPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).SearchRolesPage(ctx, req.(*SearchRolesPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_CountRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRolesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).CountRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_CountRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).CountRole(ctx, req.(*CountRolesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_RoleById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).RoleById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_RoleById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).RoleById(ctx, req.(*RoleByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_RolesByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolesByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).RolesByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_RolesByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).RolesByIds(ctx, req.(*RolesByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_RoleByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleByNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).RoleByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_RoleByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).RoleByName(ctx, req.(*RoleByNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_BatchAddRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchAddRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).BatchAddRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_BatchAddRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).BatchAddRole(ctx, req.(*BatchAddRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleService_ServiceDesc is the grpc.ServiceDesc for RoleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.liBong.rbac.service.role.api.RoleService",
	HandlerType: (*RoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addRole",
			Handler:    _RoleService_AddRole_Handler,
		},
		{
			MethodName: "deleteRole",
			Handler:    _RoleService_DeleteRole_Handler,
		},
		{
			MethodName: "updateRole",
			Handler:    _RoleService_UpdateRole_Handler,
		},
		{
			MethodName: "searchRolesPage",
			Handler:    _RoleService_SearchRolesPage_Handler,
		},
		{
			MethodName: "countRole",
			Handler:    _RoleService_CountRole_Handler,
		},
		{
			MethodName: "roleById",
			Handler:    _RoleService_RoleById_Handler,
		},
		{
			MethodName: "rolesByIds",
			Handler:    _RoleService_RolesByIds_Handler,
		},
		{
			MethodName: "roleByName",
			Handler:    _RoleService_RoleByName_Handler,
		},
		{
			MethodName: "batchAddRole",
			Handler:    _RoleService_BatchAddRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api.proto",
}
