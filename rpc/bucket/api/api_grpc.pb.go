// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: proto/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BucketService_AddBucket_FullMethodName                   = "/com.libong.storage.service.bucket.BucketService/addBucket"
	BucketService_UpdateBucket_FullMethodName                = "/com.libong.storage.service.bucket.BucketService/updateBucket"
	BucketService_DeleteBucket_FullMethodName                = "/com.libong.storage.service.bucket.BucketService/deleteBucket"
	BucketService_BucketByID_FullMethodName                  = "/com.libong.storage.service.bucket.BucketService/bucketByID"
	BucketService_SearchBucketsPage_FullMethodName           = "/com.libong.storage.service.bucket.BucketService/searchBucketsPage"
	BucketService_CountBucket_FullMethodName                 = "/com.libong.storage.service.bucket.BucketService/countBucket"
	BucketService_BucketByName_FullMethodName                = "/com.libong.storage.service.bucket.BucketService/bucketByName"
	BucketService_AddBucketObject_FullMethodName             = "/com.libong.storage.service.bucket.BucketService/addBucketObject"
	BucketService_SearchBucketObjects_FullMethodName         = "/com.libong.storage.service.bucket.BucketService/searchBucketObjects"
	BucketService_DeleteBucketObject_FullMethodName          = "/com.libong.storage.service.bucket.BucketService/deleteBucketObject"
	BucketService_MakeBucketObjectUrl_FullMethodName         = "/com.libong.storage.service.bucket.BucketService/makeBucketObjectUrl"
	BucketService_BatchAddBucketAccountRel_FullMethodName    = "/com.libong.storage.service.bucket.BucketService/batchAddBucketAccountRel"
	BucketService_BatchDeleteBucketAccountRel_FullMethodName = "/com.libong.storage.service.bucket.BucketService/batchDeleteBucketAccountRel"
	BucketService_SearchBucketAccountRel_FullMethodName      = "/com.libong.storage.service.bucket.BucketService/searchBucketAccountRel"
	BucketService_UpdateBucketAccountRel_FullMethodName      = "/com.libong.storage.service.bucket.BucketService/updateBucketAccountRel"
)

// BucketServiceClient is the client API for BucketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BucketServiceClient interface {
	// 添加桶
	AddBucket(ctx context.Context, in *AddBucketReq, opts ...grpc.CallOption) (*AddBucketResp, error)
	// 修改桶
	UpdateBucket(ctx context.Context, in *UpdateBucketReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除桶
	DeleteBucket(ctx context.Context, in *DeleteBucketReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 桶详情
	BucketByID(ctx context.Context, in *BucketByIDReq, opts ...grpc.CallOption) (*BucketByIDResp, error)
	// 分页查询
	SearchBucketsPage(ctx context.Context, in *SearchBucketsPageReq, opts ...grpc.CallOption) (*SearchBucketsPageResp, error)
	// 查询桶总数
	CountBucket(ctx context.Context, in *CountBucketReq, opts ...grpc.CallOption) (*CountBucketResp, error)
	// 根据桶名称查询桶详情
	BucketByName(ctx context.Context, in *BucketByNameReq, opts ...grpc.CallOption) (*BucketByNameResp, error)
	// 添加桶对象
	AddBucketObject(ctx context.Context, in *AddBucketObjectReq, opts ...grpc.CallOption) (*AddBucketObjectResp, error)
	// 对象查询
	SearchBucketObjects(ctx context.Context, in *SearchBucketObjectsReq, opts ...grpc.CallOption) (*SearchBucketObjectsResp, error)
	// 删除对象
	DeleteBucketObject(ctx context.Context, in *DeleteBucketObjectReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 生成文件访问路径
	MakeBucketObjectUrl(ctx context.Context, in *MakeBucketObjectUrlReq, opts ...grpc.CallOption) (*MakeBucketObjectUrlResp, error)
	// 批量添加
	BatchAddBucketAccountRel(ctx context.Context, in *BatchAddBucketAccountRelReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 批量删除
	BatchDeleteBucketAccountRel(ctx context.Context, in *BatchDeleteBucketAccountRelReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 查询
	SearchBucketAccountRel(ctx context.Context, in *SearchBucketAccountRelReq, opts ...grpc.CallOption) (*SearchBucketAccountRelResp, error)
	// 修改
	UpdateBucketAccountRel(ctx context.Context, in *UpdateBucketAccountRelReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type bucketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBucketServiceClient(cc grpc.ClientConnInterface) BucketServiceClient {
	return &bucketServiceClient{cc}
}

func (c *bucketServiceClient) AddBucket(ctx context.Context, in *AddBucketReq, opts ...grpc.CallOption) (*AddBucketResp, error) {
	out := new(AddBucketResp)
	err := c.cc.Invoke(ctx, BucketService_AddBucket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketServiceClient) UpdateBucket(ctx context.Context, in *UpdateBucketReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BucketService_UpdateBucket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketServiceClient) DeleteBucket(ctx context.Context, in *DeleteBucketReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BucketService_DeleteBucket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketServiceClient) BucketByID(ctx context.Context, in *BucketByIDReq, opts ...grpc.CallOption) (*BucketByIDResp, error) {
	out := new(BucketByIDResp)
	err := c.cc.Invoke(ctx, BucketService_BucketByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketServiceClient) SearchBucketsPage(ctx context.Context, in *SearchBucketsPageReq, opts ...grpc.CallOption) (*SearchBucketsPageResp, error) {
	out := new(SearchBucketsPageResp)
	err := c.cc.Invoke(ctx, BucketService_SearchBucketsPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketServiceClient) CountBucket(ctx context.Context, in *CountBucketReq, opts ...grpc.CallOption) (*CountBucketResp, error) {
	out := new(CountBucketResp)
	err := c.cc.Invoke(ctx, BucketService_CountBucket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketServiceClient) BucketByName(ctx context.Context, in *BucketByNameReq, opts ...grpc.CallOption) (*BucketByNameResp, error) {
	out := new(BucketByNameResp)
	err := c.cc.Invoke(ctx, BucketService_BucketByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketServiceClient) AddBucketObject(ctx context.Context, in *AddBucketObjectReq, opts ...grpc.CallOption) (*AddBucketObjectResp, error) {
	out := new(AddBucketObjectResp)
	err := c.cc.Invoke(ctx, BucketService_AddBucketObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketServiceClient) SearchBucketObjects(ctx context.Context, in *SearchBucketObjectsReq, opts ...grpc.CallOption) (*SearchBucketObjectsResp, error) {
	out := new(SearchBucketObjectsResp)
	err := c.cc.Invoke(ctx, BucketService_SearchBucketObjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketServiceClient) DeleteBucketObject(ctx context.Context, in *DeleteBucketObjectReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BucketService_DeleteBucketObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketServiceClient) MakeBucketObjectUrl(ctx context.Context, in *MakeBucketObjectUrlReq, opts ...grpc.CallOption) (*MakeBucketObjectUrlResp, error) {
	out := new(MakeBucketObjectUrlResp)
	err := c.cc.Invoke(ctx, BucketService_MakeBucketObjectUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketServiceClient) BatchAddBucketAccountRel(ctx context.Context, in *BatchAddBucketAccountRelReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BucketService_BatchAddBucketAccountRel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketServiceClient) BatchDeleteBucketAccountRel(ctx context.Context, in *BatchDeleteBucketAccountRelReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BucketService_BatchDeleteBucketAccountRel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketServiceClient) SearchBucketAccountRel(ctx context.Context, in *SearchBucketAccountRelReq, opts ...grpc.CallOption) (*SearchBucketAccountRelResp, error) {
	out := new(SearchBucketAccountRelResp)
	err := c.cc.Invoke(ctx, BucketService_SearchBucketAccountRel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketServiceClient) UpdateBucketAccountRel(ctx context.Context, in *UpdateBucketAccountRelReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BucketService_UpdateBucketAccountRel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BucketServiceServer is the server API for BucketService service.
// All implementations must embed UnimplementedBucketServiceServer
// for forward compatibility
type BucketServiceServer interface {
	// 添加桶
	AddBucket(context.Context, *AddBucketReq) (*AddBucketResp, error)
	// 修改桶
	UpdateBucket(context.Context, *UpdateBucketReq) (*emptypb.Empty, error)
	// 删除桶
	DeleteBucket(context.Context, *DeleteBucketReq) (*emptypb.Empty, error)
	// 桶详情
	BucketByID(context.Context, *BucketByIDReq) (*BucketByIDResp, error)
	// 分页查询
	SearchBucketsPage(context.Context, *SearchBucketsPageReq) (*SearchBucketsPageResp, error)
	// 查询桶总数
	CountBucket(context.Context, *CountBucketReq) (*CountBucketResp, error)
	// 根据桶名称查询桶详情
	BucketByName(context.Context, *BucketByNameReq) (*BucketByNameResp, error)
	// 添加桶对象
	AddBucketObject(context.Context, *AddBucketObjectReq) (*AddBucketObjectResp, error)
	// 对象查询
	SearchBucketObjects(context.Context, *SearchBucketObjectsReq) (*SearchBucketObjectsResp, error)
	// 删除对象
	DeleteBucketObject(context.Context, *DeleteBucketObjectReq) (*emptypb.Empty, error)
	// 生成文件访问路径
	MakeBucketObjectUrl(context.Context, *MakeBucketObjectUrlReq) (*MakeBucketObjectUrlResp, error)
	// 批量添加
	BatchAddBucketAccountRel(context.Context, *BatchAddBucketAccountRelReq) (*emptypb.Empty, error)
	// 批量删除
	BatchDeleteBucketAccountRel(context.Context, *BatchDeleteBucketAccountRelReq) (*emptypb.Empty, error)
	// 查询
	SearchBucketAccountRel(context.Context, *SearchBucketAccountRelReq) (*SearchBucketAccountRelResp, error)
	// 修改
	UpdateBucketAccountRel(context.Context, *UpdateBucketAccountRelReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedBucketServiceServer()
}

// UnimplementedBucketServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBucketServiceServer struct {
}

func (UnimplementedBucketServiceServer) AddBucket(context.Context, *AddBucketReq) (*AddBucketResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBucket not implemented")
}
func (UnimplementedBucketServiceServer) UpdateBucket(context.Context, *UpdateBucketReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBucket not implemented")
}
func (UnimplementedBucketServiceServer) DeleteBucket(context.Context, *DeleteBucketReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBucket not implemented")
}
func (UnimplementedBucketServiceServer) BucketByID(context.Context, *BucketByIDReq) (*BucketByIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BucketByID not implemented")
}
func (UnimplementedBucketServiceServer) SearchBucketsPage(context.Context, *SearchBucketsPageReq) (*SearchBucketsPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchBucketsPage not implemented")
}
func (UnimplementedBucketServiceServer) CountBucket(context.Context, *CountBucketReq) (*CountBucketResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountBucket not implemented")
}
func (UnimplementedBucketServiceServer) BucketByName(context.Context, *BucketByNameReq) (*BucketByNameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BucketByName not implemented")
}
func (UnimplementedBucketServiceServer) AddBucketObject(context.Context, *AddBucketObjectReq) (*AddBucketObjectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBucketObject not implemented")
}
func (UnimplementedBucketServiceServer) SearchBucketObjects(context.Context, *SearchBucketObjectsReq) (*SearchBucketObjectsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchBucketObjects not implemented")
}
func (UnimplementedBucketServiceServer) DeleteBucketObject(context.Context, *DeleteBucketObjectReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBucketObject not implemented")
}
func (UnimplementedBucketServiceServer) MakeBucketObjectUrl(context.Context, *MakeBucketObjectUrlReq) (*MakeBucketObjectUrlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeBucketObjectUrl not implemented")
}
func (UnimplementedBucketServiceServer) BatchAddBucketAccountRel(context.Context, *BatchAddBucketAccountRelReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchAddBucketAccountRel not implemented")
}
func (UnimplementedBucketServiceServer) BatchDeleteBucketAccountRel(context.Context, *BatchDeleteBucketAccountRelReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteBucketAccountRel not implemented")
}
func (UnimplementedBucketServiceServer) SearchBucketAccountRel(context.Context, *SearchBucketAccountRelReq) (*SearchBucketAccountRelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchBucketAccountRel not implemented")
}
func (UnimplementedBucketServiceServer) UpdateBucketAccountRel(context.Context, *UpdateBucketAccountRelReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBucketAccountRel not implemented")
}
func (UnimplementedBucketServiceServer) mustEmbedUnimplementedBucketServiceServer() {}

// UnsafeBucketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BucketServiceServer will
// result in compilation errors.
type UnsafeBucketServiceServer interface {
	mustEmbedUnimplementedBucketServiceServer()
}

func RegisterBucketServiceServer(s grpc.ServiceRegistrar, srv BucketServiceServer) {
	s.RegisterService(&BucketService_ServiceDesc, srv)
}

func _BucketService_AddBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBucketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).AddBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BucketService_AddBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).AddBucket(ctx, req.(*AddBucketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketService_UpdateBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBucketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).UpdateBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BucketService_UpdateBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).UpdateBucket(ctx, req.(*UpdateBucketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketService_DeleteBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBucketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).DeleteBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BucketService_DeleteBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).DeleteBucket(ctx, req.(*DeleteBucketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketService_BucketByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BucketByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).BucketByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BucketService_BucketByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).BucketByID(ctx, req.(*BucketByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketService_SearchBucketsPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchBucketsPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).SearchBucketsPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BucketService_SearchBucketsPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).SearchBucketsPage(ctx, req.(*SearchBucketsPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketService_CountBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountBucketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).CountBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BucketService_CountBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).CountBucket(ctx, req.(*CountBucketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketService_BucketByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BucketByNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).BucketByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BucketService_BucketByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).BucketByName(ctx, req.(*BucketByNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketService_AddBucketObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBucketObjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).AddBucketObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BucketService_AddBucketObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).AddBucketObject(ctx, req.(*AddBucketObjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketService_SearchBucketObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchBucketObjectsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).SearchBucketObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BucketService_SearchBucketObjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).SearchBucketObjects(ctx, req.(*SearchBucketObjectsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketService_DeleteBucketObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBucketObjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).DeleteBucketObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BucketService_DeleteBucketObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).DeleteBucketObject(ctx, req.(*DeleteBucketObjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketService_MakeBucketObjectUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeBucketObjectUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).MakeBucketObjectUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BucketService_MakeBucketObjectUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).MakeBucketObjectUrl(ctx, req.(*MakeBucketObjectUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketService_BatchAddBucketAccountRel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchAddBucketAccountRelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).BatchAddBucketAccountRel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BucketService_BatchAddBucketAccountRel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).BatchAddBucketAccountRel(ctx, req.(*BatchAddBucketAccountRelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketService_BatchDeleteBucketAccountRel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteBucketAccountRelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).BatchDeleteBucketAccountRel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BucketService_BatchDeleteBucketAccountRel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).BatchDeleteBucketAccountRel(ctx, req.(*BatchDeleteBucketAccountRelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketService_SearchBucketAccountRel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchBucketAccountRelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).SearchBucketAccountRel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BucketService_SearchBucketAccountRel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).SearchBucketAccountRel(ctx, req.(*SearchBucketAccountRelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketService_UpdateBucketAccountRel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBucketAccountRelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).UpdateBucketAccountRel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BucketService_UpdateBucketAccountRel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).UpdateBucketAccountRel(ctx, req.(*UpdateBucketAccountRelReq))
	}
	return interceptor(ctx, in, info, handler)
}

// BucketService_ServiceDesc is the grpc.ServiceDesc for BucketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BucketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.libong.storage.service.bucket.BucketService",
	HandlerType: (*BucketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addBucket",
			Handler:    _BucketService_AddBucket_Handler,
		},
		{
			MethodName: "updateBucket",
			Handler:    _BucketService_UpdateBucket_Handler,
		},
		{
			MethodName: "deleteBucket",
			Handler:    _BucketService_DeleteBucket_Handler,
		},
		{
			MethodName: "bucketByID",
			Handler:    _BucketService_BucketByID_Handler,
		},
		{
			MethodName: "searchBucketsPage",
			Handler:    _BucketService_SearchBucketsPage_Handler,
		},
		{
			MethodName: "countBucket",
			Handler:    _BucketService_CountBucket_Handler,
		},
		{
			MethodName: "bucketByName",
			Handler:    _BucketService_BucketByName_Handler,
		},
		{
			MethodName: "addBucketObject",
			Handler:    _BucketService_AddBucketObject_Handler,
		},
		{
			MethodName: "searchBucketObjects",
			Handler:    _BucketService_SearchBucketObjects_Handler,
		},
		{
			MethodName: "deleteBucketObject",
			Handler:    _BucketService_DeleteBucketObject_Handler,
		},
		{
			MethodName: "makeBucketObjectUrl",
			Handler:    _BucketService_MakeBucketObjectUrl_Handler,
		},
		{
			MethodName: "batchAddBucketAccountRel",
			Handler:    _BucketService_BatchAddBucketAccountRel_Handler,
		},
		{
			MethodName: "batchDeleteBucketAccountRel",
			Handler:    _BucketService_BatchDeleteBucketAccountRel_Handler,
		},
		{
			MethodName: "searchBucketAccountRel",
			Handler:    _BucketService_SearchBucketAccountRel_Handler,
		},
		{
			MethodName: "updateBucketAccountRel",
			Handler:    _BucketService_UpdateBucketAccountRel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api.proto",
}
