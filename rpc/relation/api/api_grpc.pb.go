// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: proto/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RelationService_BatchAddAccountRole_FullMethodName       = "/com.liBong.rbac.service.relation.api.RelationService/batchAddAccountRole"
	RelationService_DeleteAccountRole_FullMethodName         = "/com.liBong.rbac.service.relation.api.RelationService/deleteAccountRole"
	RelationService_SearchAccountRoles_FullMethodName        = "/com.liBong.rbac.service.relation.api.RelationService/searchAccountRoles"
	RelationService_BatchAddAccountDepartment_FullMethodName = "/com.liBong.rbac.service.relation.api.RelationService/batchAddAccountDepartment"
	RelationService_DeleteAccountDepartment_FullMethodName   = "/com.liBong.rbac.service.relation.api.RelationService/deleteAccountDepartment"
	RelationService_SearchAccountDepartments_FullMethodName  = "/com.liBong.rbac.service.relation.api.RelationService/searchAccountDepartments"
)

// RelationServiceClient is the client API for RelationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelationServiceClient interface {
	BatchAddAccountRole(ctx context.Context, in *BatchAddAccountRoleReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteAccountRole(ctx context.Context, in *DeleteAccountRoleReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SearchAccountRoles(ctx context.Context, in *SearchAccountRolesReq, opts ...grpc.CallOption) (*SearchAccountRolesResp, error)
	BatchAddAccountDepartment(ctx context.Context, in *BatchAddAccountDepartmentReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteAccountDepartment(ctx context.Context, in *DeleteAccountDepartmentReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SearchAccountDepartments(ctx context.Context, in *SearchAccountDepartmentsReq, opts ...grpc.CallOption) (*SearchAccountDepartmentsResp, error)
}

type relationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRelationServiceClient(cc grpc.ClientConnInterface) RelationServiceClient {
	return &relationServiceClient{cc}
}

func (c *relationServiceClient) BatchAddAccountRole(ctx context.Context, in *BatchAddAccountRoleReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RelationService_BatchAddAccountRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) DeleteAccountRole(ctx context.Context, in *DeleteAccountRoleReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RelationService_DeleteAccountRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) SearchAccountRoles(ctx context.Context, in *SearchAccountRolesReq, opts ...grpc.CallOption) (*SearchAccountRolesResp, error) {
	out := new(SearchAccountRolesResp)
	err := c.cc.Invoke(ctx, RelationService_SearchAccountRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) BatchAddAccountDepartment(ctx context.Context, in *BatchAddAccountDepartmentReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RelationService_BatchAddAccountDepartment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) DeleteAccountDepartment(ctx context.Context, in *DeleteAccountDepartmentReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RelationService_DeleteAccountDepartment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) SearchAccountDepartments(ctx context.Context, in *SearchAccountDepartmentsReq, opts ...grpc.CallOption) (*SearchAccountDepartmentsResp, error) {
	out := new(SearchAccountDepartmentsResp)
	err := c.cc.Invoke(ctx, RelationService_SearchAccountDepartments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelationServiceServer is the server API for RelationService service.
// All implementations must embed UnimplementedRelationServiceServer
// for forward compatibility
type RelationServiceServer interface {
	BatchAddAccountRole(context.Context, *BatchAddAccountRoleReq) (*emptypb.Empty, error)
	DeleteAccountRole(context.Context, *DeleteAccountRoleReq) (*emptypb.Empty, error)
	SearchAccountRoles(context.Context, *SearchAccountRolesReq) (*SearchAccountRolesResp, error)
	BatchAddAccountDepartment(context.Context, *BatchAddAccountDepartmentReq) (*emptypb.Empty, error)
	DeleteAccountDepartment(context.Context, *DeleteAccountDepartmentReq) (*emptypb.Empty, error)
	SearchAccountDepartments(context.Context, *SearchAccountDepartmentsReq) (*SearchAccountDepartmentsResp, error)
	mustEmbedUnimplementedRelationServiceServer()
}

// UnimplementedRelationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRelationServiceServer struct {
}

func (UnimplementedRelationServiceServer) BatchAddAccountRole(context.Context, *BatchAddAccountRoleReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchAddAccountRole not implemented")
}
func (UnimplementedRelationServiceServer) DeleteAccountRole(context.Context, *DeleteAccountRoleReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccountRole not implemented")
}
func (UnimplementedRelationServiceServer) SearchAccountRoles(context.Context, *SearchAccountRolesReq) (*SearchAccountRolesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAccountRoles not implemented")
}
func (UnimplementedRelationServiceServer) BatchAddAccountDepartment(context.Context, *BatchAddAccountDepartmentReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchAddAccountDepartment not implemented")
}
func (UnimplementedRelationServiceServer) DeleteAccountDepartment(context.Context, *DeleteAccountDepartmentReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccountDepartment not implemented")
}
func (UnimplementedRelationServiceServer) SearchAccountDepartments(context.Context, *SearchAccountDepartmentsReq) (*SearchAccountDepartmentsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAccountDepartments not implemented")
}
func (UnimplementedRelationServiceServer) mustEmbedUnimplementedRelationServiceServer() {}

// UnsafeRelationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelationServiceServer will
// result in compilation errors.
type UnsafeRelationServiceServer interface {
	mustEmbedUnimplementedRelationServiceServer()
}

func RegisterRelationServiceServer(s grpc.ServiceRegistrar, srv RelationServiceServer) {
	s.RegisterService(&RelationService_ServiceDesc, srv)
}

func _RelationService_BatchAddAccountRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchAddAccountRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).BatchAddAccountRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_BatchAddAccountRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).BatchAddAccountRole(ctx, req.(*BatchAddAccountRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_DeleteAccountRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).DeleteAccountRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_DeleteAccountRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).DeleteAccountRole(ctx, req.(*DeleteAccountRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_SearchAccountRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAccountRolesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).SearchAccountRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_SearchAccountRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).SearchAccountRoles(ctx, req.(*SearchAccountRolesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_BatchAddAccountDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchAddAccountDepartmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).BatchAddAccountDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_BatchAddAccountDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).BatchAddAccountDepartment(ctx, req.(*BatchAddAccountDepartmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_DeleteAccountDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountDepartmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).DeleteAccountDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_DeleteAccountDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).DeleteAccountDepartment(ctx, req.(*DeleteAccountDepartmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_SearchAccountDepartments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAccountDepartmentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).SearchAccountDepartments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_SearchAccountDepartments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).SearchAccountDepartments(ctx, req.(*SearchAccountDepartmentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RelationService_ServiceDesc is the grpc.ServiceDesc for RelationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RelationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.liBong.rbac.service.relation.api.RelationService",
	HandlerType: (*RelationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "batchAddAccountRole",
			Handler:    _RelationService_BatchAddAccountRole_Handler,
		},
		{
			MethodName: "deleteAccountRole",
			Handler:    _RelationService_DeleteAccountRole_Handler,
		},
		{
			MethodName: "searchAccountRoles",
			Handler:    _RelationService_SearchAccountRoles_Handler,
		},
		{
			MethodName: "batchAddAccountDepartment",
			Handler:    _RelationService_BatchAddAccountDepartment_Handler,
		},
		{
			MethodName: "deleteAccountDepartment",
			Handler:    _RelationService_DeleteAccountDepartment_Handler,
		},
		{
			MethodName: "searchAccountDepartments",
			Handler:    _RelationService_SearchAccountDepartments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api.proto",
}
