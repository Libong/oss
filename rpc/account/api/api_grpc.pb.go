// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.1
// source: proto/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AccountService_AddAccount_FullMethodName             = "/com.liBong.rbac.service.account.api.AccountService/addAccount"
	AccountService_DeleteAccount_FullMethodName          = "/com.liBong.rbac.service.account.api.AccountService/deleteAccount"
	AccountService_UpdateAccount_FullMethodName          = "/com.liBong.rbac.service.account.api.AccountService/updateAccount"
	AccountService_SearchAccountsPage_FullMethodName     = "/com.liBong.rbac.service.account.api.AccountService/searchAccountsPage"
	AccountService_CountAccount_FullMethodName           = "/com.liBong.rbac.service.account.api.AccountService/countAccount"
	AccountService_AccountById_FullMethodName            = "/com.liBong.rbac.service.account.api.AccountService/accountById"
	AccountService_AccountsByIds_FullMethodName          = "/com.liBong.rbac.service.account.api.AccountService/accountsByIds"
	AccountService_AccountByName_FullMethodName          = "/com.liBong.rbac.service.account.api.AccountService/accountByName"
	AccountService_AccountByPhone_FullMethodName         = "/com.liBong.rbac.service.account.api.AccountService/accountByPhone"
	AccountService_BatchAddAccount_FullMethodName        = "/com.liBong.rbac.service.account.api.AccountService/batchAddAccount"
	AccountService_AddAuthToken_FullMethodName           = "/com.liBong.rbac.service.account.api.AccountService/addAuthToken"
	AccountService_DeleteAuthToken_FullMethodName        = "/com.liBong.rbac.service.account.api.AccountService/deleteAuthToken"
	AccountService_SearchAuthTokens_FullMethodName       = "/com.liBong.rbac.service.account.api.AccountService/searchAuthTokens"
	AccountService_CurAuthTokenByAId_FullMethodName      = "/com.liBong.rbac.service.account.api.AccountService/curAuthTokenByAId"
	AccountService_NewestAuthTokenByToken_FullMethodName = "/com.liBong.rbac.service.account.api.AccountService/newestAuthTokenByToken"
)

// AccountServiceClient is the client API for AccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountServiceClient interface {
	AddAccount(ctx context.Context, in *AddAccountReq, opts ...grpc.CallOption) (*AddAccountResp, error)
	DeleteAccount(ctx context.Context, in *DeleteAccountReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateAccount(ctx context.Context, in *UpdateAccountReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SearchAccountsPage(ctx context.Context, in *SearchAccountsPageReq, opts ...grpc.CallOption) (*SearchAccountsPageResp, error)
	CountAccount(ctx context.Context, in *CountAccountsReq, opts ...grpc.CallOption) (*CountAccountsResp, error)
	AccountById(ctx context.Context, in *AccountByIdReq, opts ...grpc.CallOption) (*AccountByIdResp, error)
	AccountsByIds(ctx context.Context, in *AccountsByIdsReq, opts ...grpc.CallOption) (*AccountsByIdsResp, error)
	AccountByName(ctx context.Context, in *AccountByNameReq, opts ...grpc.CallOption) (*AccountByNameResp, error)
	AccountByPhone(ctx context.Context, in *AccountByPhoneReq, opts ...grpc.CallOption) (*AccountByPhoneResp, error)
	BatchAddAccount(ctx context.Context, in *BatchAddAccountReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddAuthToken(ctx context.Context, in *AddAuthTokenReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteAuthToken(ctx context.Context, in *DeleteAuthTokenReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SearchAuthTokens(ctx context.Context, in *SearchAuthTokensReq, opts ...grpc.CallOption) (*SearchAuthTokensResp, error)
	CurAuthTokenByAId(ctx context.Context, in *CurAuthTokenByAIdReq, opts ...grpc.CallOption) (*CurAuthTokenByAIdResp, error)
	NewestAuthTokenByToken(ctx context.Context, in *NewestAuthTokenByTokenReq, opts ...grpc.CallOption) (*NewestAuthTokenByTokenResp, error)
}

type accountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountServiceClient(cc grpc.ClientConnInterface) AccountServiceClient {
	return &accountServiceClient{cc}
}

func (c *accountServiceClient) AddAccount(ctx context.Context, in *AddAccountReq, opts ...grpc.CallOption) (*AddAccountResp, error) {
	out := new(AddAccountResp)
	err := c.cc.Invoke(ctx, AccountService_AddAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) DeleteAccount(ctx context.Context, in *DeleteAccountReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AccountService_DeleteAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) UpdateAccount(ctx context.Context, in *UpdateAccountReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AccountService_UpdateAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) SearchAccountsPage(ctx context.Context, in *SearchAccountsPageReq, opts ...grpc.CallOption) (*SearchAccountsPageResp, error) {
	out := new(SearchAccountsPageResp)
	err := c.cc.Invoke(ctx, AccountService_SearchAccountsPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) CountAccount(ctx context.Context, in *CountAccountsReq, opts ...grpc.CallOption) (*CountAccountsResp, error) {
	out := new(CountAccountsResp)
	err := c.cc.Invoke(ctx, AccountService_CountAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) AccountById(ctx context.Context, in *AccountByIdReq, opts ...grpc.CallOption) (*AccountByIdResp, error) {
	out := new(AccountByIdResp)
	err := c.cc.Invoke(ctx, AccountService_AccountById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) AccountsByIds(ctx context.Context, in *AccountsByIdsReq, opts ...grpc.CallOption) (*AccountsByIdsResp, error) {
	out := new(AccountsByIdsResp)
	err := c.cc.Invoke(ctx, AccountService_AccountsByIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) AccountByName(ctx context.Context, in *AccountByNameReq, opts ...grpc.CallOption) (*AccountByNameResp, error) {
	out := new(AccountByNameResp)
	err := c.cc.Invoke(ctx, AccountService_AccountByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) AccountByPhone(ctx context.Context, in *AccountByPhoneReq, opts ...grpc.CallOption) (*AccountByPhoneResp, error) {
	out := new(AccountByPhoneResp)
	err := c.cc.Invoke(ctx, AccountService_AccountByPhone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) BatchAddAccount(ctx context.Context, in *BatchAddAccountReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AccountService_BatchAddAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) AddAuthToken(ctx context.Context, in *AddAuthTokenReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AccountService_AddAuthToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) DeleteAuthToken(ctx context.Context, in *DeleteAuthTokenReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AccountService_DeleteAuthToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) SearchAuthTokens(ctx context.Context, in *SearchAuthTokensReq, opts ...grpc.CallOption) (*SearchAuthTokensResp, error) {
	out := new(SearchAuthTokensResp)
	err := c.cc.Invoke(ctx, AccountService_SearchAuthTokens_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) CurAuthTokenByAId(ctx context.Context, in *CurAuthTokenByAIdReq, opts ...grpc.CallOption) (*CurAuthTokenByAIdResp, error) {
	out := new(CurAuthTokenByAIdResp)
	err := c.cc.Invoke(ctx, AccountService_CurAuthTokenByAId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) NewestAuthTokenByToken(ctx context.Context, in *NewestAuthTokenByTokenReq, opts ...grpc.CallOption) (*NewestAuthTokenByTokenResp, error) {
	out := new(NewestAuthTokenByTokenResp)
	err := c.cc.Invoke(ctx, AccountService_NewestAuthTokenByToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServiceServer is the server API for AccountService service.
// All implementations must embed UnimplementedAccountServiceServer
// for forward compatibility
type AccountServiceServer interface {
	AddAccount(context.Context, *AddAccountReq) (*AddAccountResp, error)
	DeleteAccount(context.Context, *DeleteAccountReq) (*emptypb.Empty, error)
	UpdateAccount(context.Context, *UpdateAccountReq) (*emptypb.Empty, error)
	SearchAccountsPage(context.Context, *SearchAccountsPageReq) (*SearchAccountsPageResp, error)
	CountAccount(context.Context, *CountAccountsReq) (*CountAccountsResp, error)
	AccountById(context.Context, *AccountByIdReq) (*AccountByIdResp, error)
	AccountsByIds(context.Context, *AccountsByIdsReq) (*AccountsByIdsResp, error)
	AccountByName(context.Context, *AccountByNameReq) (*AccountByNameResp, error)
	AccountByPhone(context.Context, *AccountByPhoneReq) (*AccountByPhoneResp, error)
	BatchAddAccount(context.Context, *BatchAddAccountReq) (*emptypb.Empty, error)
	AddAuthToken(context.Context, *AddAuthTokenReq) (*emptypb.Empty, error)
	DeleteAuthToken(context.Context, *DeleteAuthTokenReq) (*emptypb.Empty, error)
	SearchAuthTokens(context.Context, *SearchAuthTokensReq) (*SearchAuthTokensResp, error)
	CurAuthTokenByAId(context.Context, *CurAuthTokenByAIdReq) (*CurAuthTokenByAIdResp, error)
	NewestAuthTokenByToken(context.Context, *NewestAuthTokenByTokenReq) (*NewestAuthTokenByTokenResp, error)
	mustEmbedUnimplementedAccountServiceServer()
}

// UnimplementedAccountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccountServiceServer struct {
}

func (UnimplementedAccountServiceServer) AddAccount(context.Context, *AddAccountReq) (*AddAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAccount not implemented")
}
func (UnimplementedAccountServiceServer) DeleteAccount(context.Context, *DeleteAccountReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedAccountServiceServer) UpdateAccount(context.Context, *UpdateAccountReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedAccountServiceServer) SearchAccountsPage(context.Context, *SearchAccountsPageReq) (*SearchAccountsPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAccountsPage not implemented")
}
func (UnimplementedAccountServiceServer) CountAccount(context.Context, *CountAccountsReq) (*CountAccountsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAccount not implemented")
}
func (UnimplementedAccountServiceServer) AccountById(context.Context, *AccountByIdReq) (*AccountByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountById not implemented")
}
func (UnimplementedAccountServiceServer) AccountsByIds(context.Context, *AccountsByIdsReq) (*AccountsByIdsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountsByIds not implemented")
}
func (UnimplementedAccountServiceServer) AccountByName(context.Context, *AccountByNameReq) (*AccountByNameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountByName not implemented")
}
func (UnimplementedAccountServiceServer) AccountByPhone(context.Context, *AccountByPhoneReq) (*AccountByPhoneResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountByPhone not implemented")
}
func (UnimplementedAccountServiceServer) BatchAddAccount(context.Context, *BatchAddAccountReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchAddAccount not implemented")
}
func (UnimplementedAccountServiceServer) AddAuthToken(context.Context, *AddAuthTokenReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAuthToken not implemented")
}
func (UnimplementedAccountServiceServer) DeleteAuthToken(context.Context, *DeleteAuthTokenReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthToken not implemented")
}
func (UnimplementedAccountServiceServer) SearchAuthTokens(context.Context, *SearchAuthTokensReq) (*SearchAuthTokensResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAuthTokens not implemented")
}
func (UnimplementedAccountServiceServer) CurAuthTokenByAId(context.Context, *CurAuthTokenByAIdReq) (*CurAuthTokenByAIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurAuthTokenByAId not implemented")
}
func (UnimplementedAccountServiceServer) NewestAuthTokenByToken(context.Context, *NewestAuthTokenByTokenReq) (*NewestAuthTokenByTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewestAuthTokenByToken not implemented")
}
func (UnimplementedAccountServiceServer) mustEmbedUnimplementedAccountServiceServer() {}

// UnsafeAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServiceServer will
// result in compilation errors.
type UnsafeAccountServiceServer interface {
	mustEmbedUnimplementedAccountServiceServer()
}

func RegisterAccountServiceServer(s grpc.ServiceRegistrar, srv AccountServiceServer) {
	s.RegisterService(&AccountService_ServiceDesc, srv)
}

func _AccountService_AddAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).AddAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_AddAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).AddAccount(ctx, req.(*AddAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_DeleteAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).DeleteAccount(ctx, req.(*DeleteAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_UpdateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).UpdateAccount(ctx, req.(*UpdateAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_SearchAccountsPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAccountsPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).SearchAccountsPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_SearchAccountsPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).SearchAccountsPage(ctx, req.(*SearchAccountsPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_CountAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAccountsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).CountAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_CountAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).CountAccount(ctx, req.(*CountAccountsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_AccountById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).AccountById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_AccountById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).AccountById(ctx, req.(*AccountByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_AccountsByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountsByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).AccountsByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_AccountsByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).AccountsByIds(ctx, req.(*AccountsByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_AccountByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountByNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).AccountByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_AccountByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).AccountByName(ctx, req.(*AccountByNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_AccountByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountByPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).AccountByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_AccountByPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).AccountByPhone(ctx, req.(*AccountByPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_BatchAddAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchAddAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).BatchAddAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_BatchAddAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).BatchAddAccount(ctx, req.(*BatchAddAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_AddAuthToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAuthTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).AddAuthToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_AddAuthToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).AddAuthToken(ctx, req.(*AddAuthTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_DeleteAuthToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAuthTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).DeleteAuthToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_DeleteAuthToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).DeleteAuthToken(ctx, req.(*DeleteAuthTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_SearchAuthTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAuthTokensReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).SearchAuthTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_SearchAuthTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).SearchAuthTokens(ctx, req.(*SearchAuthTokensReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_CurAuthTokenByAId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurAuthTokenByAIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).CurAuthTokenByAId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_CurAuthTokenByAId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).CurAuthTokenByAId(ctx, req.(*CurAuthTokenByAIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_NewestAuthTokenByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewestAuthTokenByTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).NewestAuthTokenByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_NewestAuthTokenByToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).NewestAuthTokenByToken(ctx, req.(*NewestAuthTokenByTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountService_ServiceDesc is the grpc.ServiceDesc for AccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.liBong.rbac.service.account.api.AccountService",
	HandlerType: (*AccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addAccount",
			Handler:    _AccountService_AddAccount_Handler,
		},
		{
			MethodName: "deleteAccount",
			Handler:    _AccountService_DeleteAccount_Handler,
		},
		{
			MethodName: "updateAccount",
			Handler:    _AccountService_UpdateAccount_Handler,
		},
		{
			MethodName: "searchAccountsPage",
			Handler:    _AccountService_SearchAccountsPage_Handler,
		},
		{
			MethodName: "countAccount",
			Handler:    _AccountService_CountAccount_Handler,
		},
		{
			MethodName: "accountById",
			Handler:    _AccountService_AccountById_Handler,
		},
		{
			MethodName: "accountsByIds",
			Handler:    _AccountService_AccountsByIds_Handler,
		},
		{
			MethodName: "accountByName",
			Handler:    _AccountService_AccountByName_Handler,
		},
		{
			MethodName: "accountByPhone",
			Handler:    _AccountService_AccountByPhone_Handler,
		},
		{
			MethodName: "batchAddAccount",
			Handler:    _AccountService_BatchAddAccount_Handler,
		},
		{
			MethodName: "addAuthToken",
			Handler:    _AccountService_AddAuthToken_Handler,
		},
		{
			MethodName: "deleteAuthToken",
			Handler:    _AccountService_DeleteAuthToken_Handler,
		},
		{
			MethodName: "searchAuthTokens",
			Handler:    _AccountService_SearchAuthTokens_Handler,
		},
		{
			MethodName: "curAuthTokenByAId",
			Handler:    _AccountService_CurAuthTokenByAId_Handler,
		},
		{
			MethodName: "newestAuthTokenByToken",
			Handler:    _AccountService_NewestAuthTokenByToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api.proto",
}
